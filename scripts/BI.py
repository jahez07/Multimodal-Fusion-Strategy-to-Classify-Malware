import os.path
from os import listdir
import numpy as np
import imageio
from PIL import Image as im
from numpy import *
import math

def bl_resize(original_img, new_h, new_w):
	#get dimensions of original image
	old_h, old_w = original_img.shape
	#create an array of the desired shape.
	#We will fill-in the values later.
	resized = np.zeros((new_h, new_w))
	#Calculate horizontal and vertical scaling factor
	w_scale_factor = (old_w ) / (new_w ) if new_h != 0 else 0
	h_scale_factor = (old_h ) / (new_h ) if new_w != 0 else 0
	for i in range(new_h):
		for j in range(new_w):
			#map the coordinates back to the original image
			x = i * h_scale_factor
			y = j * w_scale_factor
			#calculate the coordinate values for 4 surrounding pixels.
			x_floor = math.floor(x)
			x_ceil = min( old_h - 1, math.ceil(x))
			y_floor = math.floor(y)
			y_ceil = min(old_w - 1, math.ceil(y))


			if (x_ceil == x_floor) and (y_ceil == y_floor):
				q = original_img[int(x), int(y)]
			elif (x_ceil == x_floor):
				q1 = original_img[int(x), int(y_floor)]
				q2 = original_img[int(x), int(y_ceil)]
				q = q1 * (y_ceil - y) + q2 * (y - y_floor)
			elif (y_ceil == y_floor):
				q1 = original_img[int(x_floor), int(y)]
				q2 = original_img[int(x_ceil), int(y)]
				q = (q1 * (x_ceil - x)) + (q2	 * (x - x_floor))
			else:
				v1 = original_img[x_floor, y_floor]
				v2 = original_img[x_ceil, y_floor]
				v3 = original_img[x_floor, y_ceil]
				v4 = original_img[x_ceil, y_ceil]

				q1 = v1 * (x_ceil - x) + v2 * (x - x_floor)
				q2 = v3 * (x_ceil - x) + v4 * (x - x_floor)
				q = q1 * (y_ceil - y) + q2 * (y - y_floor)
				#print(q)
			resized[i,j] = q
	return resized.astype(np.uint8)

# path to rectangular simhash image
path = '/SimHash/SimImage'
# path to store simhash images
path2 = '/SimHash/SH[BI]'
count = 0
new_w, new_h = 256, 256

# opening a particular class
for i in listdir(path):
  class_name = os.path.basename(os.path.join(path, i))
  # path of particular file in each class
  path3 = path + '/' + i
  print(class_name)
  for j in listdir(path3):
	myfile = im.open(os.path.join(path3, j))
	file_name = os.path.basename(os.path.join(path3, j))
	image = myfile.convert('L')
	image_array = np.array(image)
	a = 224
	b = 224
	zoomed_image = bl_resize(image_array, a, b)
	new_image = im.fromarray(zoomed_image.astype(np.uint8), mode='L')
  	#display(new_image)
	if new_image.mode != 'RGB':
  		new_image = new_image.convert('RGB')
		  
	path4 = path2 + '/' + class_name
	print(file_name)
	imageio.imwrite('{}/{}.png'.format(path4, file_name), new_image)
